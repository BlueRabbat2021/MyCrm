package com.bjpowernode.crm.workbench.mapper;

import com.bjpowernode.crm.workbench.domain.Activity;

import java.util.List;
import java.util.Map;

public interface ActivityMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sat May 23 15:59:14 CST 2020
     */
    int deleteByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sat May 23 15:59:14 CST 2020
     */
    int insert(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sat May 23 15:59:14 CST 2020
     */
    int insertSelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sat May 23 15:59:14 CST 2020
     */
    Activity selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sat May 23 15:59:14 CST 2020
     */
    int updateByPrimaryKeySelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sat May 23 15:59:14 CST 2020
     */
    int updateByPrimaryKey(Activity record);

    /**
    * 保存创建的市场活动
    *//*
    int insertActivity(Activity activity);

    *//**
    * 根据条件分页查询市场活动
    *//*
    List<Activity> selectActivityForPageByCondition(Map<String, Object> map);

    *//**
    * 根据条件查询市场活动总条数
    *//*
    long selectCountOfActivityByCondition(Map<String, Object> map);
    *//**
    * 根据id查询市场活动
    *//*
    Activity selectActivityById(String id);

    *//**
    * 保存修改的市场活动
    *//*
    int updateActivity(Activity activity);

    *//**
    * 根据ids批量删除市场活动
    *//*
    int deleteActivityByIds(String[] ids);

    *//**
    * 查询所有的市场活动
    *//*
    List<Activity> selectAllActivityForDetail();
    *//**
    * 根据ids查询市场活动
    *//*
    List<Activity> selectActivityForDetailByIds(String[] ids);

    *//**
    * 批量保存创建的市场活动
    *//*
    int insertActivityByList(List<Activity> activityList);

    *//**
    * 根据id查询市场活动的明细信息
    *//*
    Activity selectActivityForDetailById(String id);

    *//**
    * 根据clueId查询跟该线索相关联的市场活动明细信息
    *//*
    List<Activity> selectActivityForDetailByClueId(String clueId);
    
    *//**
    * 根据name模糊查询市场活动，并且把已经跟clueId关联过的市场活动排除
    *//*
    List<Activity> selectActivityForDetailByNameClueId(Map<String, Object> map);

    *//**
    * 根据name模糊查询市场活动
    *//*
    List<Activity> selectActivityForDetailByName(String name);*/

    // 保存创建的市场活动
    int insertActivity(Activity activity);
    // 查询市场活动列表按多条件condition和分页page
    List<Activity> selectActivityForPageByCondition(Map<String,Object> map);
    // 根据条件查询市场活动的总数
    long selectCountOfActivityByCondition(Map<String,Object> map);
    // 根据id查询市场活动（用于编辑）
    Activity selectActivityById(String id);
    // 保存修改的市场活动
    int updateActivity(Activity activity);
    // 根据ids进行批量删除
    int deleteActivityByIds(String[] ids);
    // 导出时要抓取市场活动表中所有的数据
    List<Activity> selectActivityForDetailByIds(String[] ids);
    // 导入将excel文件中多个市场活动导入到数据库的市场活动表
    int insertActivityByList(List<Activity> activityList);
    // 进入详情页面（用于详情页面）
    Activity selectActivityForDetailById(String id);
    // 在其他模块中，需要市场活动模块的支持（全部导出）
    List<Activity> selectAllActivityForDetail();
    // 根据市场活动名称，查询所有的市场活动
    List<Activity> selectActivityForDetailByName(String name);
    // 根据ClueId查询与该线索相关的市场活动
    List<Activity> selectActivityForDetailByClueId(String clueId);
    // 查询与当前市场活动未关联的市场活动
    List<Activity> selectActivityNoBoundById(Map<String,Object> map);
}